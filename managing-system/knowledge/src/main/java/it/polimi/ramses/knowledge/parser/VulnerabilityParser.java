package it.polimi.ramses.knowledge.parser;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import it.polimi.ramses.knowledge.domain.architecture.Service;
import it.polimi.ramses.knowledge.domain.persistence.Vulnerability;

import java.io.Reader;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

public class VulnerabilityParser {
    public static Map<String, List<Vulnerability>> parse(Reader json, List<Service> services) {
        Map<String, List<Vulnerability>> servicesVulnerabilities = new HashMap<>();
        Gson gson = new Gson();
        JsonObject servicesJson = gson.fromJson(json, JsonObject.class);

        for (Map.Entry<String, JsonElement> entry : servicesJson.entrySet()) {
            String serviceName = entry.getKey();
            JsonArray vulnerabilitiesJson = entry.getValue().getAsJsonArray();

            List<Vulnerability> vulnerabilityList = new LinkedList<>();
            for (int i = 0; i < vulnerabilitiesJson.size(); i++) {
                JsonObject vulnerabilityJson = vulnerabilitiesJson.get(i).getAsJsonObject();

                for (Map.Entry<String, JsonElement> vulnerabilityEntry : vulnerabilityJson.entrySet()) {
                    String jarName = vulnerabilityEntry.getKey();
                    JsonArray scoresJsonArray = vulnerabilityEntry.getValue().getAsJsonArray();

                    List<Double> scores = new LinkedList<>();
                    for (int j = 0; j < scoresJsonArray.size(); j++) {
                        JsonElement scoreJson = scoresJsonArray.get(j);
                        scores.add(scoreJson.isJsonNull() ? null : scoreJson.getAsDouble());
                    }

                    Service service = services.stream().filter(s -> s.getPossibleImplementations().values().stream().anyMatch(impl -> impl.getImplementationId().equals(serviceName))).findFirst().orElse(null);
                    String serviceId = service != null ? service.getServiceId() : null;

                    Vulnerability vulnerability = new Vulnerability(serviceId, serviceName, jarName, scores.get(0));
                    vulnerabilityList.add(vulnerability);
                }
            }

            servicesVulnerabilities.put(serviceName, vulnerabilityList);
        }

        return servicesVulnerabilities;
    }
}
